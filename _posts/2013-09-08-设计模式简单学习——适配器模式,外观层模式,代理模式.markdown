---
author: LeoPan
comments: true
date: 2013-09-08 14:25:03+00:00
layout: post
slug: '设计模式简单学习——适配器模式,外观层模式,代理模式'
title: 设计模式简单学习——适配器模式,外观层模式,代理模式
wordpress_id: 739
categories:
- Design Pattern
tags:
- facade
- proxy
- 代理层
- 外观
- 设计模式
- 适配器模式
---

### 适配器模式





  






<blockquote>
  
> 
> 定义:将一个类的接口,转换成客户期望的另一个接口,适配器让原本接口不兼容的类可以合作无间
> 
> 
</blockquote>





首先,什么是适配器?如下图,适配器就像一个中间件,能使调用者理解被适配者





![Adapter2](/images/Adapter2.png)
<!-- more -->
适配器模式简单实例:
{% highlight csharp linenos%}
namespace ADAPTER{
        //用户调用的目标
    public interface Target{
        void request();
    }
        //被适配者
    public class Adaptee{
        public void specificRequest(){
            Console.WriteLine("I have specific request");
        }
    }
        //适配器:继承了被适配者,实现了目标
    public class Adapter :Adaptee,Target {
        public void request(){
            this.specificRequest ();
        }
    }
        //测试
    class MainClass
    {
        public static void Main (string[] args)
        {
            Target t = new Adapter ();
            t.request ();
        }
    }
}
{% endhighlight %}





适配器模式类图:





![adapter](/images/adapter.png)







  * 该模式通过创建适配器进行接口转换,让不兼容的接口变成兼容,这可以让客户从实现的接口解耦.如果在一段时间后,我们想要改变接口,适配器可以将改变的部分封装起来,客户就不必为了应对不同的接口而每次跟着修改了.


  * 适配器又分为类适配器(多重继承)和对象适配器(直接调用对象)


  * 适配器模式将目标类和适配者类解耦,增强了扩展性灵活性,且符合[开闭原则](http://zh.wikipedia.org/zh/%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99)





### 外观模式





  






<blockquote>
  
> 
> 定义:提供一个统一的接口,用来访问子系统中的一群接口,外观定义了一个高层接口,让子系统更容易使用
> 
> 
</blockquote>





外观层类图:





![facade](/images/facade.png)]







  * 类图明显反应了调用者完全不需要知道各个子系统分担了什么功能


  * 外观层的意图是要提供一个简单的接口,好让一个子系统更易于使用,从这个模式的类图可以感受到


  * 使用Facade层作为若干子系统的统一简单入口,可以降低系统的复杂性,降低客户类与子系统之间的耦合度


  * 使用Facade层在有新增子系统的情况,除了怎家子系统还需要修改Facade层或者客户端的源代码





  






### 代理模式





<blockquote>
  
> 
> 定义:给某一个对象提供一个代理，并由代理对象控制对原对象的引用
> 
> 
</blockquote>





代理模式简单实例:
{% highlight csharp linenos%}
namespace PROXY
{
        //目标接口
    public interface Subject{
        void request();
    }
        //真实目标
    public class RealSubject(){
        public void request(){
            //...
        }
    }
        //利用代理了,控制了用户对真实目标的访问
    public class Proxy implements Subject
    {
        private RealSubject realSubject = new RealSubject();
        public void preRequest(){
            //...
        }
        public void request()
        {
            preRequest();
            realSubject.request();
            postRequest();
        }
        public void postRequest(){
            //...
        }
    }
}
{% endhighlight %}





代理模式类图:





![proxy](/images/proxy.png)







  * 代理模式中,代理类控制了客户对真实对象的访问,客户在调用时不需要关心真实对象本身


  * 代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。


  * 远程代理使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。


  * 虚拟代理通过使用一个小对象来代表一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。


  * 保护代理可以控制对真实对象的使用权限。


  * 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。


  * 实现代理模式需要额外的工作，有些代理模式的实现非常复杂。


  * 实例:远程代理,如RMI


  * 用于翻墙.用于FUCK GFW!



